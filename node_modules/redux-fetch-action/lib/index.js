'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFetchAction = createFetchAction;
exports.handleFetchAction = handleFetchAction;

var _reduxActions = require('redux-actions');

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(v) {
  return v;
}

function createFetchAction(name, url, options) {
  return function () {
    return function (dispatch) {
      dispatch((0, _reduxActions.createAction)(name)());
      return (0, _isomorphicFetch2.default)(url, options).then(function (response) {
        if (response.status >= 200 && response.status < 300) {
          return response;
        } else {
          var error = new Error(response.statusText);
          error.response = response;
          throw error;
        }
      }).then(function (response) {
        if (/json/.test(response.headers.get('Content-Type'))) {
          return response.json();
        } else {
          return response.text();
        }
      }).then(function (object) {
        dispatch((0, _reduxActions.createAction)(name, identity, function () {
          return {
            status: 'OK'
          };
        })(object));
      }).catch(function (e) {
        dispatch((0, _reduxActions.createAction)(name)(e));
      });
    };
  };
}

function handleFetchAction(name, object) {
  if (typeof objet === 'function') {
    return (0, _reduxActions.handleAction)(name, object);
  } else {
    return (0, _reduxActions.handleAction)(name, {
      next: function next(state, action) {
        if (action.meta && action.meta.status === 'OK') {
          if (object && object.receive && typeof object.receive === 'function') {
            return object.receive(state, action);
          } else {
            return state;
          }
        } else {
          if (object && object.request && typeof object.request === 'function') {
            return object.request(state, action);
          } else {
            return state;
          }
        }
      },
      throw: function _throw(state, action) {
        if (object && object.error && typeof object.error === 'function') {
          return object.error(state, action);
        } else {
          return state;
        }
      }
    });
  }
}